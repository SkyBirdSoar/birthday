// Generated by CoffeeScript 1.8.0
(function() {
  var createLetter, create_x1_Tile, create_x4_Tile, create_x9_Tile, generate4, randomLetter, randomOrientation, setUpTile;

  create_x1_Tile = function(x, y) {
    return DRAW_OPTS.canvas.display.rectangle({
      x: x,
      y: y,
      origin: {
        x: "left",
        y: "top"
      },
      height: DRAW_OPTS.tiles.x1,
      width: DRAW_OPTS.tiles.x1,
      fill: DRAW_OPTS.randomFill()
    });
  };

  create_x4_Tile = function(x, y) {
    return DRAW_OPTS.canvas.display.rectangle({
      x: x,
      y: y,
      origin: {
        x: "left",
        y: "top"
      },
      height: DRAW_OPTS.tiles.x4,
      width: DRAW_OPTS.tiles.x4,
      fill: DRAW_OPTS.randomFill()
    });
  };

  create_x9_Tile = function(x, y) {
    return DRAW_OPTS.canvas.display.rectangle({
      x: x,
      y: y,
      origin: {
        x: "left",
        y: "top"
      },
      height: DRAW_OPTS.tiles.x9,
      width: DRAW_OPTS.tiles.x9,
      fill: DRAW_OPTS.randomFill()
    });
  };

  generate4 = function() {
    return Math.floor(Math.random() * 4);
  };

  randomLetter = function() {
    return DRAW_OPTS.letters[Math.floor(Math.random() * DRAW_OPTS.letters.length)];
  };

  randomOrientation = function() {
    switch (generate4()) {
      case 0:
        return 0;
      case 1:
        return 90;
      case 2:
        return 180;
      case 3:
        return 270;
    }
  };

  createLetter = function(len, letter, size) {
    return DRAW_OPTS.canvas.display.text({
      x: len / 2,
      y: len / 2,
      origin: {
        x: "center",
        y: "center"
      },
      text: letter,
      size: size,
      fill: "#000",
      font: "bold " + size + "px " + DRAW_OPTS.font
    });
  };

  setUpTile = function(size, x, y, base) {
    var letter, tile;
    switch (size) {
      case 1:
        tile = create_x1_Tile(x, y);
        if (Math.random() < DRAW_OPTS.chance.letter) {
          letter = createLetter(DRAW_OPTS.tiles.x1, randomLetter(), DRAW_OPTS.fontSize.x1);
          tile.addChild(letter);
        }
        break;
      case 4:
        tile = create_x4_Tile(x, y);
        if (Math.random() < DRAW_OPTS.chance.letter) {
          letter = createLetter(DRAW_OPTS.tiles.x4, randomLetter(), DRAW_OPTS.fontSize.x4);
          tile.addChild(letter);
        }
        break;
      case 9:
        tile = create_x9_Tile(x, y);
        if (Math.random() < DRAW_OPTS.chance.letter) {
          letter = createLetter(DRAW_OPTS.tiles.x9, randomLetter(), DRAW_OPTS.fontSize.x9);
          tile.addChild(letter);
        }
    }
    base.addChild(tile);
    return [tile, letter];
  };

  DRAW_OPTS.generateTile = function(x, y) {
    var base, i, j, letter;
    base = setUpTile(9, x, y, DRAW_OPTS.canvas);
    letter = base[1];
    base = base[0];
    if (Math.random() > DRAW_OPTS.chance.x9) {
      base.removeChild(letter);
      if (Math.random() > DRAW_OPTS.chance.x4) {
        i = 0;
        while (i < 3) {
          y = i * DRAW_OPTS.tiles.x1;
          j = 0;
          while (j < 3) {
            x = j * DRAW_OPTS.tiles.x1;
            setUpTile(1, x, y, base);
            j++;
          }
          i++;
        }
      } else {
        switch (generate4()) {
          case 0:
            setUpTile(4, 0, 0, base);
            x = DRAW_OPTS.tiles.x4;
            i = 0;
            while (i < 3) {
              y = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
            y = DRAW_OPTS.tiles.x4;
            i = 0;
            while (i < 2) {
              x = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
            break;
          case 1:
            setUpTile(4, DRAW_OPTS.tiles.x1, 0, base);
            x = 0;
            i = 0;
            while (i < 3) {
              y = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
            y = DRAW_OPTS.tiles.x4;
            i = 1;
            while (i < 2) {
              x = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
            break;
          case 2:
            setUpTile(4, 0, DRAW_OPTS.tiles.x1, base);
            y = 0;
            i = 0;
            while (i < 3) {
              x = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
            x = DRAW_OPTS.tiles.x4;
            i = 1;
            while (i < 2) {
              y = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
            break;
          case 3:
            setUpTile(4, DRAW_OPTS.tiles.x1, DRAW_OPTS.tiles.x1, base);
            y = 0;
            i = 0;
            while (i < 3) {
              x = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
            x = 0;
            i = 1;
            while (i < 2) {
              y = i * DRAW_OPTS.tiles.x1;
              setUpTile(1, x, y, base);
              i++;
            }
        }
      }
    }
    return base;
  };

}).call(this);
